describe("handler - set from hash",function(){describe("when adding multiple handlers via an object literal / hash",function(){var e,t;beforeEach(function(){t={foo:jasmine.createSpy("foo handler"),bar:jasmine.createSpy("bar handler")},e=new Wreqr.Handlers,e.setHandlers(t)}),it("should add all named handlers",function(){expect(e.hasHandler("foo")).toBe(!0),expect(e.hasHandler("bar")).toBe(!0)}),it("should execute the handler",function(){e.getHandler("foo")(),e.getHandler("bar")(),expect(t.foo).toHaveBeenCalled(),expect(t.bar).toHaveBeenCalled()})}),describe("when the object literal values are objects with a callback and context attribute",function(){var e,t,n;beforeEach(function(){n={},t={foo:{callback:jasmine.createSpy("foo handler"),context:n}},e=new Wreqr.Handlers,e.setHandlers(t),e.getHandler("foo")()}),it("should execute the handler callback with the specified context",function(){expect(t.foo.callback).toHaveBeenCalled(),expect(t.foo.callback.mostRecentCall.object).toBe(n)})})});